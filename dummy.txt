create table profiles(
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone default timezone('utc'::text,now()) not null,
  username text unique,
  full_name text,
  email text,

  constraint username_length check(char_length(username)>=3)
);

alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using(true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid()= id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid()=id);

create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles(id,username)
  values (new.id, new.raw_user_meta_data->>'username');
  return new;
end;

$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

create table tweet(
  id uuid primary key,
  text text not null,
  profile_id uuid not null,
  created_at timestamp with time zone default timezone('utc'::text,now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text,now()) not null,
  foreign key (profile_id) references profiles(id) on delete cascade

);

create table hashtag(
  id uuid primary key,
  name text not null
);

create table tweet_hashtag(
  tweet_id uuid not null,
  hashtag_id uuid not null,
  primary key (tweet_id, hashtag_id),
  foreign key (tweet_id) references tweet(id) on delete cascade,
  foreign key (hashtag_id) references hashtag(id) on delete cascade
);

create table reply(
  id uuid primary key,
  text text not null,
  user_id uuid not null,
  tweet_id uuid ,
  reply_id uuid ,
  foreign key (user_id) references profiles(id) on delete cascade,
  foreign key (tweet_id) references tweet(id) on delete cascade,
  foreign key (reply_id) references reply(id) on delete cascade
);

create table likes(
  id uuid primary key,
  user_id uuid not null,
  tweet_id uuid not null,
  created_at timestamp with time zone default timezone('utc'::text,now()) not null,
  constraint like_unique unique(user_id,tweet_id),
  foreign key(user_id) references profiles(id) on delete cascade,
  foreign key(tweet_id) references tweet(id) on delete cascade
);

create table bookmarks(
  id uuid primary key,
  user_id uuid,
  tweet_id uuid,
  created_at timestamp with time zone default timezone('utc'::text,now()) not null,
  constraint bookmark_unique unique(user_id,tweet_id),
  foreign key(user_id) references profiles(id) on delete cascade,
  foreign key(tweet_id) references tweet(id) on delete cascade
)